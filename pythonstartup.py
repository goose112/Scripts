import telebot
import requests
import datetime

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã
TG_BOT_TOKEN = "7970600935:AAEa3EH3MdPfMc3FDEFYcmiCUP8xlXhrUeI" # –í–∞—à —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
OPENWEATHER_TOKEN = "3c40c4a65ae92807fdc86fdceaa3dd07" # –í–∞—à —Ç–æ–∫–µ–Ω OpenWeatherMap

bot = telebot.TeleBot(TG_BOT_TOKEN)

user_data = {}
CODE_TO_SMILE = {
    "Clear": "‚òÄÔ∏è",
    "Clouds": "‚òÅÔ∏è",
    "Rain": "‚òîÔ∏è",
    "Drizzle": "‚òîÔ∏è",
    "Thunderstorm": "‚õàÔ∏è",
    "Snow": "‚ùÑÔ∏è",
    "Mist": "üå´Ô∏è"
}

def get_weather(city):
    try:
        response = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_TOKEN}&units=metric&lang=ru"
        )
        response.raise_for_status()
        data = response.json()
        if data["cod"] != 200:
            raise ValueError(f"–û—à–∏–±–∫–∞ –æ—Ç OpenWeatherMap: {data['message']}")

        city_name = data["name"]
        temperature = data["main"]["temp"]
        weather_description = data["weather"][0]["main"]
        smile = CODE_TO_SMILE.get(weather_description, "‚ùì")
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        day_length = sunset_timestamp - sunrise_timestamp

        return {
            "city": city_name,
            "temperature": temperature,
            "description": smile + " " + weather_description,
            "humidity": humidity,
            "pressure": pressure,
            "wind": wind,
            "sunrise": sunrise_timestamp.strftime("%H:%M"),
            "sunset": sunset_timestamp.strftime("%H:%M"),
            "day_length": day_length,
        }

    except requests.exceptions.RequestException as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except KeyError as e:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç OpenWeatherMap: {e}")
    except Exception as e:
        raise ValueError(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def create_keyboard():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data="get_weather"))
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è)")
        bot.register_next_step_handler(message, process_name)
    else:
        bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {user_data[chat_id]['name']}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_keyboard())

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "get_weather":
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, {user_data[call.message.chat.id]['name']}?",
            reply_markup=create_keyboard()
        )
        bot.register_next_step_handler(call.message, process_city)

def process_name(message):
    chat_id = message.chat.id
    name = message.text
    user_data[chat_id] = {'name': name}
    bot.send_message(chat_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_keyboard())


def process_city(message):
    chat_id = message.chat.id
    try:
        weather_info = get_weather(message.text)
        report = (
            f"*{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}*\n"
            f"–ü—Ä–∏–≤–µ—Ç, {user_data[chat_id]['name']}!\n"
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {weather_info['city']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_info['temperature']}¬∞C {weather_info['description']}\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_info['humidity']}%\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: {weather_info['pressure']} –º–º.—Ä—Ç.—Å—Ç\n"
            f"–í–µ—Ç–µ—Ä: {weather_info['wind']} –º/—Å\n"
            f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {weather_info['sunrise']}\n"
            f"–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {weather_info['sunset']}\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {weather_info['day_length']}\n"
            f"*–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!*"
        )
        bot.send_message(chat_id, report, reply_markup=create_keyboard())
    except ValueError as e:
        bot.send_message(chat_id, f"\U00002620 –û—à–∏–±–∫–∞: {e}", reply_markup=create_keyboard())

bot.infinity_polling()